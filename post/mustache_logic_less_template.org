#+BLOG: my-blog
#+POSTID: 151
#+ORG2BLOG:
#+DATE: [2017-02-27 Wed 00:08]
#+OPTIONS: toc:4 num:nil todo:nil pri:nil tags:nil ^:nil
#+CATEGORY: coding
#+TAGS: mustache, template
#+TITLE:       Mustache--Logic-Less templates
#+AUTHOR:      thief
#+EMAIL:       thiefuniverses@gmail.com
#+DATE:        2017-02-27
#+URI:         mustache_tempalte
#+KEYWORDS:    mustache
#+TAGS:        template,mustache
#+LANGUAGE:    en
#+OPTIONS:     html-validation-link:nil

* Introduction
  mustache是一个模板体系,定义了一种很简单而实用的模板实现.下文中你可以看到这个模板体系的基本特点和python实现的使用方式．

* Basic Theory
(以下代码用python3进行演示,使用了mustache模板的python实现，库名叫pystache)
** 通过hash表来赋值创建模板
*** 基本变量(键值)渲染
   #+BEGIN_SRC python :results output
     {{=<% %>=}}
     import pystache
     print(pystache.render('Hi {{person}}!', {'person': 'Mom'}))
     #    : Hi Mom!
     <%={{ }}=%>
   #+END_SRC

*** 变量真值条件渲染
通过判断hashtable中键值(#加变量)是否存在(存在即为真值，或者变量名前加^时只有变量值为假才渲染模板)，来渲染模板．
   #+BEGIN_SRC python :results output
     {{=<% %>=}}
     import pystache
     renderer=pystache.Renderer()
     parsed = pystache.parse(u"Hey {{#who}}{{.}}!{{/who}}")

     print(renderer.render(parsed,{})) # who 不存在故不渲染who标签部分
     print(renderer.render(parsed,{'who':'thief'}))　#分别根据who的值渲染出不同句子
     print(renderer.render(parsed,{'who':'universe'}))

     context = { 'author': 'Chris Wanstrath', 'maintainer': 'Chris Jerdonek' }# 一次传入多个值
     print(pystache.render("Author: {{author}}\nMaintainer: {{maintainer}}", context))

     print(pystache.render( "{{^is-sunny}}Take an umbrella!{{/is-sunny}}", {'is-sunny':False}))

     # : Hey
     # : Hey thief!
     # : Hey universe!
     # : Author: Chris Wanstrath
     # : Maintainer: Chris Jerdonek
     # : Take an umbrella!
     <%={{ }}=%>
   #+END_SRC

*** 控制转义(3*{或者&符号)
对于变量值，如果是<等其他一些特殊字符会被 *转义* ，用三个大括号或者&符号可以取消转义，保留原字符．
   #+BEGIN_SRC python :results output
     {{=<% %>=}}
     import pystache
     renderer=pystache.Renderer()
     parsed = pystache.parse(u"{{company}}\n{{&company}}\n{{{company}}}")

     print(renderer.render(parsed,{'company':'<b>GitHub</b>'}))
     # : &lt;b&gt;GitHub&lt;/b&gt;
     # : <b>GitHub</b>
     # : <b>GitHub</b>

     <%={{ }}=%>
   #+END_SRC

*** 列表渲染
对于列表，还可以作列表渲染．当#变量存在，且hashtable中的值对应为一个列表时，mustache会进行列表渲染．
分别针对值列表的每个元素依次渲染出结果．


   #+BEGIN_SRC python :results output
     {{=<% %>=}}
     import pystache
     renderer=pystache.Renderer()
     parsed = pystache.parse(u"{{#repo}}\nhello,{{name}}! you are {{age}}\n{{/repo}}")

     print(renderer.render(parsed,
      		     {'repo':[
                               {"name":"thief","age":33},
                               {"name":"fly","age":88},
                               {"name":"universe","age":99}
      		     ]}))
     #  : hello,thief! you are 33
     #  : hello,fly! you are 88
     #  : hello,universe! you are 99
     <%={{ }}=%>

   #+END_SRC

*** 注释方式
    #+BEGIN_SRC python
    {{=<% %>=}}
    {{! It is a line for comment }}
    <%={{ }}=%>
    #+END_SRC

*** 模板嵌套
    mustache的标签支持模板嵌套(即一个模板中嵌入其他多个模板).如下是一个html模板嵌套的例子.
    #+BEGIN_SRC html
      {{=<& &>=}}
      <!-- use > and tags name to embed tags-name.mustache file -->
      <!DOCTYPE html>
      <html lang="en-us">
        {{> header}}
        <body class="wrapper">
          <header>
        {{> person-zone}}
        {{> nav}}
          </header>
          <section id="blog-index">
        {{> blog-index}}
          </section>
          {{> footer}}
        </body>
      </html>
      <&={{ }}=&>
    #+END_SRC

*** 标签符号修改
    mustache的标签可以在渲染过程中修改,原始为两个大括号.

    #+BEGIN_SRC python
      {{=<& &>=}}
      {{default_tags}} #原始标签
      {{=<% %>=}}   #标签改变为等号中间的新标签
      <% erb_style_tags %>　#应用新标签
      <%={{ }}=%> # 把标签改回默认的
      <&={{ }}=&>
    #+END_SRC

*** lambda 表达式支持
    mustache标签支持lambda表达式来渲染改变标签内文字.(本人并未实践，感兴趣大家可以试试😆)
