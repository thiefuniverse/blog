#+TITLE:       C++ abstract_class, interface, inherit
#+AUTHOR:      ThankFly
#+EMAIL:       thiefuniverses@gmail.com
#+DATE:        2016-09-29
#+URI:         cplusplus_abstract_class
#+KEYWORDS:    c++,abstract,interface,inherit
#+TAGS:        C++
#+LANGUAGE:    en
#+OPTIONS:     toc:4
#+DESCRIPTION: basic comprehension for C++
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../media/stylesheets/org.css">


*  C++ 抽象类和接口的实现
  C++中的接口是通过 *抽象类* 来实现的,抽象类中全是纯虚函数时,则可实现该类的接口作用.如果类中含有纯虚函数也有其他变量,此时该抽象类可以作为一个父类(而不只是接口)来提供基本的变量和属性.


* 虚函数的动态绑定
  下面这段代码中让父类类型的指针指向子类的object,当父类的hello方法声明为虚函数时,该指针可动态地自动调用子类(本身它指向的就是子类的object)的方法;然而如果父类不声明为虚函数时,该指针会执行父类的hello函数.


  #+BEGIN_SRC C
      #include <iostream>
        class Parent
        {
        public:
        virtual void hello(){
            std::cout << "I'm parent.\n";
        }
        };

        class child: public Parent
        {
            public :
            void hello()
            {
                std::cout << "I'm child.";
            }
        };
        int main()
        {
            Parent *a=new child();
            a->hello();
            return 0;
        }

  #+END_SRC


* 三种继承的性质

** public 继承 

 | 父类      | 子类      |
 | public    | public    |
 | protected | protected |
 | private   | no power  |


 
** private 继承 

 | 父类      | 子类     |
 | public    | private  |
 | protected | private  |
 | private   | no power |


 
** protected 继承

 | 父类      | 子类      |
 | public    | protected |
 | protected | protected |
 | private   | no power  |

 其中,三种访问标号的 *访问范围* 是:

** private:
*** 该类中的函数
*** 该类的友元函数
*** 不能被任何其他访问,该类的object也不能访问.

** protected:
*** 该类的函数
*** 子类的函数 
*** 该类的友元函数,该类的object也不能访问

** public:
*** 该类中的函数 
*** 子类的函数
*** 该类的友元函数
*** 该类的对象
