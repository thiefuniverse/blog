#+TITLE:       ThiefLisp解释器构造-step0
#+AUTHOR:      thief
#+EMAIL:       thiefuniverses@gmail.com
#+DATE:        2017-03-11
#+URI:         articles/2017/03/thieflisp
#+KEYWORDS:    lisp,interpreter
#+LANGUAGE:    en
#+OPTIONS:     toc:nil  num:nil 


* 实现一个Lisp解释器
** Introduction
   本系列ThiefLisp使用C++实现,参考了github上这个[[https://github.com/kanaka/mal/blob/master/process/guide.md][ mal ]]项目中的实现过程以及cpp实现.
Lisp语言在被发明时一度超越时代，但由于硬件（如CPU的处理速度)无法满足需求以及它表面
上看似让人无法接受的 *语法* (括号语法)，导致Lisp最终只是退居于人工智能领域等，而不是成为一门像C++
一样流行的主流语言. Lisp包含许多现代高级语言的特性，如递归，垃圾回收，REPL等．尤其重要的
是Lisp宏的特性更是给Lisp带来了无限的扩展空间与可能．不像C的那种基本是替换字符串的宏，Lisp
宏可以无限地拓展其本身的语法．如果你不想用for来表示循环了，你可以自己定义出其他的for循环格式．
一切写法都可以由你自己重定义(当然， *Lisp is a list processor*, 它需要是list形式).
 
[[../../../resource/img/lisplogo.png]]

   这是一段elisp(emacs lisp)的代码:

   #+BEGIN_SRC emacs-lisp
     (defun rename-this-file-and-buffer (new-name)
       "Rename both current buffer and file it's visiting to New Name"
       (interactive "sNew name : ")
       (let ((name (buffer-name))
   	  (filename (buffer-file-name)))
         (unless filename
   	(error "Buffer '%s' is not visiting a file !" name))
         (progn
   	(when (file-exists-p filename)
   	  (rename-file filename new-name 1))
   	(set-visited-file-name new-name)
   	(rename-buffer new-name))))
   #+END_SRC

** A Lisp Interpreter
   此次实现Lisp解释器旨在对Lisp本身的工作原理有更深刻的理解(为下一步创造更简单高效的
类Lisp语言做铺垫)，虽然说不同的Lisp实现本身有可能差别特别大，但是只要实现了语言标准
([[http://kanaka.github.io/mal/process/cheatsheet.html][这个cheatsheet上是这个系列列出来的基本语言特征]]),就可以叫它Lisp解释器.大家在学习的同时
也可以对这类函数式语言(实际上Lisp支持多范式)的工作过程有一定了解.
** 代码说明
   我实现的代码会放在[[https://github.com/thiefuniverse/ThiefLisp][github]]上. 按照实现的步骤,代码会有step0-stepA多个版本,大家查看时可
直接git checkout到对应的step去．建议大家在阅读的同时可以自己重新实现一个，这样体会更深，
也可以作为一个不错的C++项目来练手.感兴趣的还可以尝试学习Lisp(现在比较流行的有common lisp,
scheme还有用来写emacs的elisp,emacs下推荐elisp,敲起来很方便).
* Step0 -- 实现基本的REPL结构
** 0.0: 构造基本循环
   这一部其实很简单，就是构造一个循环，输入一条语句后eval一下打印出来(当前只是打印，不作实际的
计算处理).

#+BEGIN_SRC C++
  void ThiefLisp::run() {
      initLisp();
      while(lispContinue)
      {
      // ThiefLisp运行后读取一次输入的指令并求值打印，即基本的REPL
          std::string readResult=reader.readOnce(inputInfo);
          std::string evalResult=evaler.eval(readResult);
          printer.print(evalResult);
          if(evalResult==quitStr)
          {
              lispContinue=false;
          }
      }
  }
#+END_SRC

** 0.1: 优化解释器基本操作
   利用的GNU的[[https://cnswww.cns.cwru.edu/php/chet/readline/rltop.html][readline]] 库，实现对解释器输入指令的历史记录功能.

   #+BEGIN_SRC C++
     std::string ThiefLisp_Reader::readOnce(std::string& inputInfo) {
         const char* inputIn=inputInfo.c_str();
         std::string readResult(readline(inputIn));
         //读取指令的同时添加到历史中并写入历史记录文件
         add_history(readResult.c_str());
         append_history(1,historyFileName.c_str());
         return readResult;
     }
   #+END_SRC

** 0.2: 具体实现见step0代码，现在已经开启了Lisp解释器的大门~

* Lisp外部资源:
*** [[http://stackoverflow.com/questions/267862/what-makes-lisp-macros-so-special][What makes lisp macro so special?]]
*** [[http://www.ruanyifeng.com/blog/2010/10/why_lisp_is_superior.html][Why lisp is superior]]?
*** 黑客与画家
